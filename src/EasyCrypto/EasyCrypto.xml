<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyCrypto</name>
    </assembly>
    <members>
        <member name="T:EasyCrypto.ActualPasswordGeneratorOptions">
            <summary>
            This options are actually used for generating passwords.
            This options are used to set actual length of different char groups (Upper, Lower, Numbers and Symbols)
            because in other options we are using min values.
            </summary>
        </member>
        <member name="T:EasyCrypto.AdditionalData">
            <summary>
            Additional data to add to the encrypted, this data is not protected (but not saved in plain text either)
            For example can be used for password hint, date of encryption etc...
            </summary>
        </member>
        <member name="P:EasyCrypto.AdditionalData.Data">
            <summary>
            Dictionary that will contain additional data
            </summary>
        </member>
        <member name="T:EasyCrypto.AesEncryption">
            <summary>
            AES encryption helper class
            </summary>
        </member>
        <member name="M:EasyCrypto.AesEncryption.EncryptWithPassword(System.String,System.String,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts string and returns string. Salt and IV will be embedded to encrypted string.
            Can later be decrypted with <see cref="M:EasyCrypto.AesEncryption.DecryptWithPassword(System.String,System.String,EasyCrypto.ReportAndCancellationToken)"/>
            IV and salt are generated by <see cref="T:EasyCrypto.CryptoRandom"/> which is using System.Security.Cryptography.Rfc2898DeriveBytes.
            IV size is 16 bytes (128 bits) and key size will be 32 bytes (256 bits).
            </summary>
            <param name="dataToEncrypt">String to encrypt</param>
            <param name="password">Password that is used for generating key for encryption/decryption</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.DecryptWithPassword(System.String,System.String,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts string with embedded salt and IV that are encrypted with <see cref="M:EasyCrypto.AesEncryption.EncryptWithPassword(System.Byte[],System.String,EasyCrypto.ReportAndCancellationToken)"/>
            </summary>
            <param name="dataToDecrypt">string to decrypt</param>
            <param name="password">Password that is used for generating key for encryption/decryption</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.EncryptWithPassword(System.Byte[],System.String,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts byte array and returns byte array. Salt and IV will be embedded in result.
            Can be later decrypted using <see cref="M:EasyCrypto.AesEncryption.DecryptWithPassword(System.Byte[],System.String,EasyCrypto.ReportAndCancellationToken)"/>
            IV and salt are generated by <see cref="T:EasyCrypto.CryptoRandom"/> which is using System.Security.Cryptography.Rfc2898DeriveBytes.
            IV size is 16 bytes (128 bits) and key size will be 32 bytes (256 bits).
            </summary>
            <param name="dataToEncrypt">Bytes to encrypt</param>
            <param name="password">Password that is used for generating key for encryption/decryption</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Encrypted bytes</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.DecryptWithPassword(System.Byte[],System.String,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts byte array with embedded salt and IV that is encrypted with <see cref="M:EasyCrypto.AesEncryption.EncryptWithPassword(System.Byte[],System.String,EasyCrypto.ReportAndCancellationToken)"/>
            </summary>
            <param name="dataToDecrypt"></param>
            <param name="password">Password that is used for generating key for encryption/decryption</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Decrypted bytes</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.EncryptWithPassword(System.IO.Stream,System.String,System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Reads data from stream (parameter dataToEncrypt) and writes encrypted data to stream (parameter destination).
            Can be later decrypted using <see cref="M:EasyCrypto.AesEncryption.DecryptWithPassword(System.IO.Stream,System.String,System.IO.Stream,EasyCrypto.ReportAndCancellationToken)"/>.
            Salt and IV will be embedded to resulting stream.
            IV and salt are generated by <see cref="T:EasyCrypto.CryptoRandom"/> which is using System.Security.Cryptography.Rfc2898DeriveBytes.
            IV size is 16 bytes (128 bits) and key size will be 32 bytes (256 bits).
            </summary>
            <param name="dataToEncrypt">Stream containing data to encrypt</param>
            <param name="password">Password that is used for generating key for encryption/decryption</param>
            <param name="destination">Stream to which to write encrypted data</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
        </member>
        <member name="M:EasyCrypto.AesEncryption.EncryptWithPasswordAsync(System.IO.Stream,System.String,System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Reads data from stream (parameter dataToEncrypt) and writes encrypted data to stream (parameter destination) asynchronously.
            Can be later decrypted using <see cref="M:EasyCrypto.AesEncryption.DecryptWithPasswordAsync(System.IO.Stream,System.String,System.IO.Stream,EasyCrypto.ReportAndCancellationToken)"/>.
            Salt and IV will be embedded to resulting stream.
            IV and salt are generated by <see cref="T:EasyCrypto.CryptoRandom"/> which is using System.Security.Cryptography.Rfc2898DeriveBytes.
            IV size is 16 bytes (128 bits) and key size will be 32 bytes (256 bits).
            </summary>
            <param name="dataToEncrypt">Stream containing data to encrypt</param>
            <param name="password">Password that is used for generating key for encryption/decryption</param>
            <param name="destination">Stream to which to write encrypted data</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.DecryptWithPassword(System.IO.Stream,System.String,System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts the with password data that was encrypted with <see cref="M:EasyCrypto.AesEncryption.EncryptWithPassword(System.IO.Stream,System.String,System.IO.Stream,EasyCrypto.ReportAndCancellationToken)"/>
            </summary>
            <param name="dataToDecrypt">The data to decrypt.</param>
            <param name="password">The password.</param>
            <param name="destination">The destination stream.</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
        </member>
        <member name="M:EasyCrypto.AesEncryption.DecryptWithPasswordAsync(System.IO.Stream,System.String,System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts the with password asynchronously data that was encrypted with <see cref="M:EasyCrypto.AesEncryption.EncryptWithPasswordAsync(System.IO.Stream,System.String,System.IO.Stream,EasyCrypto.ReportAndCancellationToken)"/>
            </summary>
            <param name="dataToDecrypt">The data to decrypt.</param>
            <param name="password">The password.</param>
            <param name="destination">The destination stream.</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
        </member>
        <member name="M:EasyCrypto.AesEncryption.EncryptAndEmbedIv(System.Byte[],System.Byte[],EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts bytes and embeds IV. Can be decrypted with <see cref="M:EasyCrypto.AesEncryption.DecryptWithEmbeddedIv(System.Byte[],System.Byte[],EasyCrypto.ReportAndCancellationToken)"/>
            IV is generated by <see cref="T:EasyCrypto.CryptoRandom"/> which is using System.Security.Cryptography.Rfc2898DeriveBytes.
            IV size is 16 bytes (128 bits) and key size will be 32 bytes (256 bits).
            </summary>
            <param name="dataToEncrypt">Bytes to encrypt</param>
            <param name="key">Key that will be used for encryption/decryption</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Byte array, encrypted data with embedded IV</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.DecryptWithEmbeddedIv(System.Byte[],System.Byte[],EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts bytes with embedded IV encrypted with <see cref="M:EasyCrypto.AesEncryption.EncryptAndEmbedIv(System.Byte[],System.Byte[],EasyCrypto.ReportAndCancellationToken)"/>
            </summary>
            <param name="dataToDecrypt">Bytes, data with embedded IV, to decrypt</param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Byte array, encrypted data</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.EncryptAndEmbedIv(System.IO.Stream,System.Byte[],System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts and embeds IV into result. Data is read from stream and encrypted data is wrote to stream.
            Can be decrypted with <see cref="M:EasyCrypto.AesEncryption.DecryptWithEmbeddedIv(System.IO.Stream,System.Byte[],System.IO.Stream,EasyCrypto.ReportAndCancellationToken)"/>
            IV is generated by <see cref="T:EasyCrypto.CryptoRandom"/> which is using System.Security.Cryptography.Rfc2898DeriveBytes.
            IV size is 16 bytes (128 bits).
            </summary>
            <param name="dataToEncrypt">Stream containing data to encrypt</param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="destination"></param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
        </member>
        <member name="M:EasyCrypto.AesEncryption.DecryptWithEmbeddedIv(System.IO.Stream,System.Byte[],System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts data with embedded IV, that is encrypted with <see cref="M:EasyCrypto.AesEncryption.EncryptAndEmbedIv(System.IO.Stream,System.Byte[],System.IO.Stream,EasyCrypto.ReportAndCancellationToken)"/>, into result. 
            Data is read from stream and decrypted data is wrote to stream.
            </summary>
            <param name="dataToDecrypt">Stream containing data to decrypt.</param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="destination">Stream to which decrypted data will be wrote.</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
        </member>
        <member name="M:EasyCrypto.AesEncryption.Encrypt(System.Byte[],System.Byte[],System.Byte[],EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts data from byte array to byte array.
            </summary>
            <param name="dataToEncrypt"></param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="iv">Initialization vector, must be 16 bytes</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Encrypted data in for of bytes</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.Decrypt(System.Byte[],System.Byte[],System.Byte[],EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts data from byte array to byte array.
            </summary>
            <param name="dataToDecrypt"></param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="iv">Initialization vector, must be 16 bytes</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Decrypted data in for of bytes</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.Encrypt(System.IO.Stream,System.Byte[],System.Byte[],System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts data from stream to stream.
            </summary>
            <param name="dataToEncrypt">Stream with data to decrypt.</param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="iv">Initialization vector, must be 16 bytes</param>
            <param name="destination">Stream to which encrypted data will be wrote.</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
        </member>
        <member name="M:EasyCrypto.AesEncryption.EncryptAsync(System.IO.Stream,System.Byte[],System.Byte[],System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts data from stream to stream asynchronously.
            </summary>
            <param name="dataToEncrypt">Stream with data to decrypt.</param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="iv">Initialization vector, must be 16 bytes</param>
            <param name="destination">Stream to which encrypted data will be wrote.</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.Decrypt(System.IO.Stream,System.Byte[],System.Byte[],System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts data from stream to stream.
            </summary>
            <param name="dataToDecrypt">Stream with data to encrypt.</param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="iv">Initialization vector, must be 16 bytes</param>
            <param name="destination">Stream to which decrypted data will be wrote.</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
        </member>
        <member name="M:EasyCrypto.AesEncryption.DecryptAsync(System.IO.Stream,System.Byte[],System.Byte[],System.IO.Stream,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts data from stream to stream asynchronously.
            </summary>
            <param name="dataToDecrypt">Stream with data to encrypt.</param>
            <param name="key">Key that will be used for encryption/decryption, must be 16, 24 or 32 bytes long.</param>
            <param name="iv">Initialization vector, must be 16 bytes</param>
            <param name="destination">Stream to which decrypted data will be wrote.</param>
            <param name="token">Optional token for progress reporting and canceling operation.</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.ValidateEncryptedData(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Validates the encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data</param>
            <param name="key">The key</param>
            <param name="iv">The IV</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.ValidateEncryptedData(System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Validates the encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data</param>
            <param name="key">The key</param>
            <param name="iv">The IV</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.ValidateEncryptedDataWithEmbededIv(System.Byte[],System.Byte[])">
            <summary>
            Validates the encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data</param>
            <param name="key">Key used for encryption</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.ValidateEncryptedDataWithEmbededIv(System.IO.Stream,System.Byte[])">
            <summary>
            Validates the encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data</param>
            <param name="key">Key used for encryption</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.ValidateEncryptedDataWithPassword(System.String,System.String)">
            <summary>
            Validates the encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data</param>
            <param name="password">Password used for encryption</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.ValidateEncryptedDataWithPassword(System.Byte[],System.String)">
            <summary>
            Validates the encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data</param>
            <param name="password">Password used for encryption</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryption.ValidateEncryptedDataWithPassword(System.IO.Stream,System.String)">
            <summary>
            Validates the encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data</param>
            <param name="password">Password used for encryption</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="T:EasyCrypto.AesEncryptionAdditionalData">
            <summary>
            Class used for embedding and reading additional data from already encrypted data.
            Additional data is not protected, but it isn't added in plain text either.
            </summary>
        </member>
        <member name="M:EasyCrypto.AesEncryptionAdditionalData.AddAdditionalData(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds additional data to encrypted data. Additional data is not protected, but it isn't added in plain text either.
            </summary>
            <param name="encryptedData">The encrypted data to which to add additional data.</param>
            <param name="additionalData">The additional data to add. Dictionary items where key or value is null or empty will be ignored/</param>
            <returns>Encrypted data with added additional data</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryptionAdditionalData.AddAdditionalData(System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds additional data to encrypted data. Additional data is not protected, but it isn't added in plain text either.
            </summary>
            <param name="encryptedData">The encrypted data to which to add additional data.</param>
            <param name="additionalData">The additional data to add. Dictionary items where key or value is null or empty will be ignored/</param>
            <returns>Encrypted data with added additional data</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryptionAdditionalData.AddAdditionalData(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            Adds additional data to encrypted data. Additional data is not protected, but it isn't added in plain text either.
            </summary>
            <param name="encryptedData">The encrypted data to which to add additional data.</param>
            <param name="additionalData">The additional data to add. Dictionary items where key or value is null or empty will be ignored/</param>
            <param name="destination">Stream to which to write encrypted data with added additional data</param>
        </member>
        <member name="M:EasyCrypto.AesEncryptionAdditionalData.ReadAdditionalData(System.String)">
            <summary>
            Reads the additional data from encrypted data if present.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <returns>Additional data</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryptionAdditionalData.ReadAdditionalData(System.Byte[])">
            <summary>
            Reads the additional data from encrypted data if present.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <returns>Additional data</returns>
        </member>
        <member name="M:EasyCrypto.AesEncryptionAdditionalData.ReadAdditionalData(System.IO.Stream)">
            <summary>
            Reads the additional data from encrypted data if present.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <returns>Additional data</returns>
        </member>
        <member name="T:EasyCrypto.AesFileEncrytion">
            <summary>
            File encryption abstraction
            </summary>
        </member>
        <member name="M:EasyCrypto.AesFileEncrytion.Encrypt(System.String,System.String,System.Byte[],System.Byte[],System.Boolean,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts the specified file.
            </summary>
            <param name="sourceFilePath">The plain text file path.</param>
            <param name="destinationFilePath">The encrypted file path to write to.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <param name="token">Optional token for progress report and cancellation of the operation.</param>
            <param name="overwriteExistingFile">if set to <c>false</c> exception will be thrown if file already exists.</param>
        </member>
        <member name="M:EasyCrypto.AesFileEncrytion.EncryptAsync(System.String,System.String,System.Byte[],System.Byte[],System.Boolean,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts the specified file asynchronously.
            </summary>
            <param name="sourceFilePath">The plain text file path.</param>
            <param name="destinationFilePath">The encrypted file path to write to.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <param name="overwriteExistingFile">if set to <c>false</c> exception will be thrown if file already exists.</param>
            <param name="token">Optional token for progress report and cancellation of the operation.</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:EasyCrypto.AesFileEncrytion.Decrypt(System.String,System.String,System.Byte[],System.Byte[],System.Boolean,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts the specified file.
            </summary>
            <param name="sourceFilePath">The encrypted file path.</param>
            <param name="destinationFilePath">The decrypted file path to write to.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <param name="overwriteExistingFile">if set to <c>false</c> exception will be thrown if destination file already exists.</param>
            <param name="token">Optional token for progress report and cancellation of the operation.</param>
        </member>
        <member name="M:EasyCrypto.AesFileEncrytion.DecryptAsync(System.String,System.String,System.Byte[],System.Byte[],System.Boolean,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts the specified file asynchronously.
            </summary>
            <param name="sourceFilePath">The encrypted file path.</param>
            <param name="destinationFilePath">The decrypted file path to write to.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <param name="overwriteExistingFile">if set to <c>false</c> exception will be thrown if destination file already exists.</param>
            <param name="token">Optional token for progress report and cancellation of the operation.</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:EasyCrypto.AesFileEncrytion.EncryptWithPassword(System.String,System.String,System.String,System.Boolean,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts the with password asynchronously.
            </summary>
            <param name="sourceFilePath">The source file path to encrypt.</param>
            <param name="destinationFilePath">The destination file path to write to encrypted data.</param>
            <param name="password">The password.</param>
            <param name="overwriteExistingFile">if set to <c>false</c> exception will be thrown if destination file already exists.</param>
            <param name="token">Optional token for progress report and cancellation of the operation.</param>
        </member>
        <member name="M:EasyCrypto.AesFileEncrytion.EncryptWithPasswordAsync(System.String,System.String,System.String,System.Boolean,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Encrypts the with password asynchronously.
            </summary>
            <param name="sourceFilePath">The source file path to encrypt.</param>
            <param name="destinationFilePath">The destination file path to write to encrypted data.</param>
            <param name="password">The password.</param>
            <param name="overwriteExistingFile">if set to <c>false</c> exception will be thrown if destination file already exists.</param>
            <param name="token">Optional token for progress report and cancellation of the operation.</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:EasyCrypto.AesFileEncrytion.DecryptWithPassword(System.String,System.String,System.String,System.Boolean,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts the with password.
            </summary>
            <param name="sourceFilePath">The source file path to decrypt.</param>
            <param name="destinationFilePath">The destination file path to write to decrypted data.</param>
            <param name="password">The password.</param>
            <param name="overwriteExistingFile">if set to <c>true</c> [overwrite existing file].</param>
            <param name="token">Optional token for progress report and cancellation of the operation.</param>
        </member>
        <member name="M:EasyCrypto.AesFileEncrytion.DecryptWithPasswordAsync(System.String,System.String,System.String,System.Boolean,EasyCrypto.ReportAndCancellationToken)">
            <summary>
            Decrypts the with password asynchronously.
            </summary>
            <param name="sourceFilePath">The source file path to decrypt.</param>
            <param name="destinationFilePath">The destination file path to write to decrypted data.</param>
            <param name="password">The password.</param>
            <param name="overwriteExistingFile">if set to <c>true</c> [overwrite existing file].</param>
            <param name="token">Optional token for progress report and cancellation of the operation.</param>
            <returns>Task to await</returns>
        </member>
        <member name="T:EasyCrypto.CryptoContainer">
            <summary>
            Used internally to check for format and metadata (header data)
            </summary>
        </member>
        <member name="T:EasyCrypto.CryptoRandom">
            <summary>
            Cryptographic level RNG using <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/>.
            </summary>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.#ctor(System.Boolean)">
            <summary>
            Constructor with support for buffering
            </summary>
            <param name="useBuffer">If true less calls to underlying RNG will be placed,
            should improved performance in case when single instance of <see cref="T:EasyCrypto.CryptoRandom"/>
            is used multiple times, default value is false</param>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextBytesStatic(System.UInt32)">
            <summary>
            Returns new random bytes.
            </summary>
            <param name="length">The number for bytes to return.</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextBytes(System.UInt32)">
            <summary>
            Returns byte array
            </summary>
            <param name="length">Length of array to return</param>
            <returns>Byte array filled with random bytes</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextIntStatic">
            <summary>
            Generates random int &gt;= 0
            </summary>
            <returns>Random integer</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextIntStatic(System.Int32)">
            <summary>
            Generates random int &gt;= 0 and &lt; maxExclusive
            </summary>
            <param name="maxExclusive">Maximum exclusive value to return</param>
            <returns>Random integer</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextIntStatic(System.Int32,System.Int32)">
            <summary>
            Generates random int &gt;= minInclusive and &lt; maxExclusive
            </summary>
            <param name="minInclusive">Minimum inclusive value to return</param>
            <param name="maxExclusive">Maximum exclusive value to return</param>
            <returns>Random integer</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextInt">
            <summary>
            Generates random int &gt;= 0
            </summary>
            <returns>Random integer</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextInt(System.Int32)">
            <summary>
            Generates random int &gt;= 0 and &lt; maxExclusive
            </summary>
            <param name="maxExclusive">Maximum exclusive value to return</param>
            <returns>Random integer</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextInt(System.Int32,System.Int32)">
            <summary>
            Generates random int &gt;= minInclusive and &lt; maxExclusive
            </summary>
            <param name="minInclusive">Minimum inclusive value to return</param>
            <param name="maxExclusive">Maximum exclusive value to return</param>
            <returns>Random integer</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextDouble">
            <summary>
            Generates random double between 0.0 and 1.0
            </summary>
            <returns>Random double</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.NextDoubleStatic">
            <summary>
            Return random double between 0 and 1
            </summary>
            <returns>Double between 0 and 1</returns>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.FillIntArrayWithRandomValues(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Fills array of integers with random values
            </summary>
            <param name="arrayToFill">Array to fill with random integers</param>
            <param name="minInclusive">Minimum inclusive value to return</param>
            <param name="maxExclusive">Maximum exclusive value to return</param>
        </member>
        <member name="M:EasyCrypto.CryptoRandom.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:EasyCrypto.DataTools">
            <summary>
            Helper methods for work with byte arrays
            </summary>
        </member>
        <member name="M:EasyCrypto.DataTools.SkipTake(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Skips and take desired number of bytes.
            </summary>
            <param name="array">The array used for source.</param>
            <param name="skip">Number of bytes to skip (start index).</param>
            <param name="take">Number of bytes to take.</param>
            <returns>Byte array</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:EasyCrypto.DataTools.JoinByteArrays(System.Byte[][])">
            <summary>
            Joins the byte arrays.
            </summary>
            <param name="byteArrays">The byte arrays to join.</param>
            <returns>Joined byte array to one byte array</returns>
        </member>
        <member name="M:EasyCrypto.DataTools.CompareByteArrays(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays.
            </summary>
            <param name="ba1">Byte array 1.</param>
            <param name="ba2">Byte array 2.</param>
            <returns>Bool, true if arrays are equal.</returns>
        </member>
        <member name="M:EasyCrypto.DataTools.ToBytes(System.IO.Stream)">
            <summary>
            Reads whole stream and returns bytes of the stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>Byte array, from the stream</returns>
        </member>
        <member name="T:EasyCrypto.Exceptions.DataFormatValidationException">
            <summary>
            Data Format Validation Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:EasyCrypto.Exceptions.DataFormatValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.DataFormatValidationException"/> class.
            </summary>
        </member>
        <member name="M:EasyCrypto.Exceptions.DataFormatValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.DataFormatValidationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EasyCrypto.Exceptions.DataFormatValidationException.#ctor(System.String,EasyCrypto.Exceptions.DataFormatValidationException.DataValidationErrors)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.DataFormatValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:EasyCrypto.Exceptions.DataFormatValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.DataFormatValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:EasyCrypto.Exceptions.DataFormatValidationException.ValidationError">
            <summary>
            Gets or sets the validation error.
            </summary>
            <value>
            The validation error.
            </value>
        </member>
        <member name="T:EasyCrypto.Exceptions.DataFormatValidationException.DataValidationErrors">
            <summary>
            Types of validation errors
            </summary>
        </member>
        <member name="F:EasyCrypto.Exceptions.DataFormatValidationException.DataValidationErrors.DataIsTooShort">
            <summary>
            data is too short
            </summary>
        </member>
        <member name="F:EasyCrypto.Exceptions.DataFormatValidationException.DataValidationErrors.InvalidMagicNumber">
            <summary>
            invalid magic number
            </summary>
        </member>
        <member name="F:EasyCrypto.Exceptions.DataFormatValidationException.DataValidationErrors.UnsupportedDataVersion">
            <summary>
            unsupported data version
            </summary>
        </member>
        <member name="F:EasyCrypto.Exceptions.DataFormatValidationException.DataValidationErrors.DataIntegrityValidationError">
            <summary>
            data integrity validation error
            </summary>
        </member>
        <member name="F:EasyCrypto.Exceptions.DataFormatValidationException.DataValidationErrors.KeyCheckValueValidationError">
            <summary>
            key check value validation error
            </summary>
        </member>
        <member name="T:EasyCrypto.Exceptions.DataIntegrityValidationException">
            <summary>
            This exception is thrown when validation of data integrity is failing.
            This will occur when data that is being decrypted is changed before decrypting.
            </summary>
            <seealso cref="T:System.Security.Cryptography.CryptographicException" />
        </member>
        <member name="M:EasyCrypto.Exceptions.DataIntegrityValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.DataIntegrityValidationException"/> class.
            </summary>
        </member>
        <member name="M:EasyCrypto.Exceptions.DataIntegrityValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.DataIntegrityValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:EasyCrypto.Exceptions.DataIntegrityValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.DataIntegrityValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:EasyCrypto.Exceptions.KeyCheckValueValidationException">
            <summary>
            This is exception is thrown when validation of Key Check Value (KCV) is failing.
            This can occur when wrong key/password is used for decryption.
            </summary>
            <seealso cref="T:System.Security.Cryptography.CryptographicException" />
        </member>
        <member name="M:EasyCrypto.Exceptions.KeyCheckValueValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.KeyCheckValueValidationException"/> class.
            </summary>
        </member>
        <member name="M:EasyCrypto.Exceptions.KeyCheckValueValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.KeyCheckValueValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:EasyCrypto.Exceptions.KeyCheckValueValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyCrypto.Exceptions.KeyCheckValueValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:EasyCrypto.IdGenerator">
            <summary>
            Id generator that has two mandatory parts (time base part, random part) and
            one optional part (fixed part), 
            generated id templateId without hyphens is {timePart}{fixedPart}{randomPart}
            generated id templateId wit hyphens is {timePart}-{fixedPart}-{randomPart}
            </summary>
        </member>
        <member name="P:EasyCrypto.IdGenerator.Default">
            <summary>
            Default instance of Id generator with FastRandom = true, FixedPart = "", RandomPartLength = 6 and AddHyphens = false
            </summary>
        </member>
        <member name="P:EasyCrypto.IdGenerator.FixedPart">
            <summary>
            Fixed part that is set in the middle of the generated Id
            </summary>
        </member>
        <member name="P:EasyCrypto.IdGenerator.FastRandom">
            <summary>
            If true, System.Random is used for random part, if false EasyCrypto.CryptoRandom is used
            </summary>
        </member>
        <member name="P:EasyCrypto.IdGenerator.RandomPartLength">
            <summary>
            Length of random part, default value is 6, must not be less than 4 or greater than 100
            </summary>
        </member>
        <member name="P:EasyCrypto.IdGenerator.AddHyphens">
            <summary>
            If true hyphens (-) are added between parts
            </summary>
        </member>
        <member name="M:EasyCrypto.IdGenerator.#ctor">
            <summary>
            Default constructor, FixedPart = "", FastRandom = true
            </summary>
        </member>
        <member name="M:EasyCrypto.IdGenerator.#ctor(System.Boolean)">
            <summary>
            Constructor to accept boolean value telling the generator to use or not to use fast random
            </summary>
            <param name="fastRandom">If true System.Random is used, otherwise EasyCrypto.CryptoRandom is used</param>
        </member>
        <member name="M:EasyCrypto.IdGenerator.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor to accept boolean value telling the generator to use or not to use fast random and
            fixed part of generated id
            </summary>
            <param name="fixedPart">Fixed part to set in middle of generated id</param>
            <param name="fastRandom">If true System.Random is used, otherwise EasyCrypto.CryptoRandom is used</param>
        </member>
        <member name="M:EasyCrypto.IdGenerator.NewId">
            <summary>
            Generates new id string where for time part current UTC time is used
            </summary>
            <returns>String, generated id</returns>
        </member>
        <member name="M:EasyCrypto.IdGenerator.NewId(System.DateTime)">
            <summary>
            Generates new id using specified time
            Warning: when using this override, make sure to specify very precise time, including milliseconds
            </summary>
            <param name="time">Time to use in id generation</param>
            <returns>String, generated id</returns>
        </member>
        <member name="T:EasyCrypto.PasswordGenerationOptions">
            <summary>
            Options that are used for <see cref="T:EasyCrypto.PasswordGenerator"/>
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.Length">
            <summary>
            Length of password, default is 16
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.ValidUpperCase">
            <summary>
            Upper case chars to use, default is "QWERTYUIOPASDFGHJKLZXCVBNM"
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.ValidLowerCase">
            <summary>
            Lower case chars to use, default is "qwertyuiopasdfghjklzxcvbnm"
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.ValidSymbols">
            <summary>
            Symbols to use, default is "!@#$%^&amp;*_+-" (without quotes)
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.MinUpperCase">
            <summary>
            Minimum number of upper case to use, maximum will be set to at least twice as much (zero means don't use it), default is 4
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.MinLowerCase">
            <summary>
            Minimum number of lower case to use, maximum will be set to at least twice as much (zero means don't use it), default is 4
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.MinNumbers">
            <summary>
            Minimum number of numbers to use, maximum will be set to at least twice as much (zero means don't use it), default is 2
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.MinSymbols">
            <summary>
            Minimum number of symbols to use, maximum will be set to at least twice as much (zero means don't use it), default is 2
            </summary>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.SetLength(System.UInt32)">
            <summary>
            Sets length and adjusts MinUpperCase, MinLowerCase, MinNumbers and MinSymbols randomly if needed
            </summary>
            <param name="length">length of the password to generate, cannot be less than 4</param>
            <returns>this instance</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.UseUpperCase(System.String)">
            <summary>
            Sets upper case chars to use
            </summary>
            <param name="upperCase"></param>
            <returns>this instance</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.UseLowerCase(System.String)">
            <summary>
            Sets lower case chars to use
            </summary>
            <param name="lowerCase"></param>
            <returns>this instance</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.UseSymbols(System.String)">
            <summary>
            Sets symbol chars to use
            </summary>
            <param name="symbols"></param>
            <returns>this instance</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.SetMinUpperCase(System.UInt32)">
            <summary>
            Sets <see cref="P:EasyCrypto.PasswordGenerationOptions.MinUpperCase"/>
            </summary>
            <param name="value"></param>
            <returns>this instance</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.SetMinLowerCase(System.UInt32)">
            <summary>
            Sets <see cref="P:EasyCrypto.PasswordGenerationOptions.MinLowerCase"/>
            </summary>
            <param name="value"></param>
            <returns>this instance</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.SetMinNumbers(System.UInt32)">
            <summary>
            Sets <see cref="P:EasyCrypto.PasswordGenerationOptions.MinNumbers"/>
            </summary>
            <param name="value"></param>
            <returns>this instance</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.SetMinSymbols(System.UInt32)">
            <summary>
            Sets <see cref="P:EasyCrypto.PasswordGenerationOptions.MinUpperCase"/>
            </summary>
            <param name="value"></param>
            <returns>this instance</returns>
        </member>
        <member name="P:EasyCrypto.PasswordGenerationOptions.Default">
            <summary>
            Default options, length 16, min 4 lower case, min 4 upper case, min 2 number and min 2 symbols
            </summary>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.AreValid(System.String@)">
            <summary>
            Validates options
            </summary>
            <param name="message">returns message containing error</param>
            <returns>Boolean, true if options are valid</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.ValidateParameter(System.String,System.String)">
            <summary>
            Validates char array parameter
            </summary>
            <param name="value">Value of the parameter</param>
            <param name="name">Name of the parameter</param>
        </member>
        <member name="M:EasyCrypto.PasswordGenerationOptions.GetActuals">
            <summary>
            Generates actual options from this
            </summary>
            <returns>ActualPasswordGeneratorOptions</returns>
        </member>
        <member name="T:EasyCrypto.PasswordGenerator">
            <summary>
            Class for generating cryptographically secure passwords
            </summary>
        </member>
        <member name="M:EasyCrypto.PasswordGenerator.GenerateStatic">
            <summary>
            Generates random password of 16 chars
            </summary>
            <returns>Random password</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerator.GenerateStatic(System.UInt32)">
            <summary>
            Generates random password with desired length.
            </summary>
            <param name="length">Length of the password, default is 16, cannot be less than 4</param>
            <returns>Random password</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerator.GenerateStatic(EasyCrypto.PasswordGenerationOptions)">
            <summary>
            Generates password using provided options. Options must be valid (check by calling <see cref="M:EasyCrypto.PasswordGenerationOptions.AreValid(System.String@)"/>).
            </summary>
            <param name="options">Options used for generating passwords</param>
            <returns>Random password</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerator.Generate">
            <summary>
            Generates random password of 16 chars
            </summary>
            <returns>Random password</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerator.Generate(System.UInt32)">
            <summary>
            Generates random password with desired length.
            </summary>
            <param name="length">Length of the password, default is 16, cannot be less than 4</param>
            <returns>Random password</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerator.Generate(EasyCrypto.PasswordGenerationOptions)">
            <summary>
            Generates password using provided options. Options must be valid (check by calling <see cref="M:EasyCrypto.PasswordGenerationOptions.AreValid(System.String@)"/>).
            </summary>
            <param name="options">Options used for generating passwords</param>
            <returns>Random password</returns>
        </member>
        <member name="M:EasyCrypto.PasswordGenerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:EasyCrypto.PasswordHasher">
            <summary>
            Password hasher and validator
            </summary>
        </member>
        <member name="P:EasyCrypto.PasswordHasher.HashLengthInBytes">
            <summary>
            Gets the hash length in bytes.
            </summary>
            <value>
            The hash length in bytes.
            </value>
        </member>
        <member name="P:EasyCrypto.PasswordHasher.SaltLengthInBytes">
            <summary>
            Gets the salt length in bytes.
            </summary>
            <value>
            The salt length in bytes.
            </value>
        </member>
        <member name="P:EasyCrypto.PasswordHasher.HashIterations">
            <summary>
            Gets the hash iterations.
            </summary>
            <value>
            The hash iterations.
            </value>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.#ctor">
            <summary>
            Default constructor with 32 bytes of salt, 32 bytes of hash and 25000 hash iterations
            </summary>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.#ctor(System.UInt32)">
            <summary>
            Construction that accepts size of hash and salt
            </summary>
            <param name="hashAndSaltLengthsInBytes">Length of hash and salt in bytes,
            must be one of: 8, 16, 32, 64, 128 (128 might be overkill)</param>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construction that accepts size of hash and salt and number of iterations
            </summary>
            <param name="hashAndSaltLengthsInBytes">Length of hash and salt in bytes,
            must be one of: 8, 16, 32, 64</param>
            <param name="hashIterations">Number of hash iterations</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.HashPassword(System.String,System.Byte[])">
            <summary>
            Hashes password
            </summary>
            <param name="password">Password to hash</param>
            <param name="salt">Salt to use for hashing</param>
            <returns>
            Byte[], hashed password
            </returns>
            <exception cref="T:System.ArgumentException">
            password cannot be null, empty or white space
            or
            salt cannot be null and must be in length equal to value set in constructor, default is 16 bytes
            </exception>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.HashPasswordAndGenerateSalt(System.String,System.Byte[]@)">
            <summary>
            Hashes password and generates new salt
            </summary>
            <param name="password">Password to hash</param>
            <param name="salt">Generated salt</param>
            <returns>
            Byte[], Hash of the password
            </returns>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.HashPasswordAndGenerateEmbeddedSalt(System.String)">
            <summary>
            Hashes password and adds salt to output, can be later validated by <see cref="M:EasyCrypto.PasswordHasher.ValidatePasswordWithEmbeddedSalt(System.String,System.Byte[])" />
            </summary>
            <param name="password">Password to hash</param>
            <returns>
            Byte[], hashed password with embedded salt
            </returns>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.HashPasswordAndGenerateEmbeddedSaltAsString(System.String)">
            <summary>
            Same as <see cref="M:EasyCrypto.PasswordHasher.HashPasswordAndGenerateEmbeddedSalt(System.String)" /> but returns base64 string
            Can be validated by <see cref="M:EasyCrypto.PasswordHasher.ValidatePasswordWithEmbeddedSalt(System.String,System.String)" />
            </summary>
            <param name="password">Password to hash</param>
            <returns>
            String, hashed password with embedded salt
            </returns>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.ValidatePassword(System.String,System.Byte[],System.Byte[])">
            <summary>
            Validates password against provided hash
            </summary>
            <param name="password">Password to check</param>
            <param name="hash">Hash of check the password against</param>
            <param name="salt">Salt used for original hashing</param>
            <returns>Bool, true if password is valid</returns>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.ValidatePasswordWithEmbeddedSalt(System.String,System.Byte[])">
            <summary>
            Validates password against provided salt with embedded hash
            </summary>
            <param name="password">Password to check</param>
            <param name="hashAndEmbeddedSalt">Hash with embedded salt</param>
            <returns>
            Bool, true if password is valid
            </returns>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.ValidatePasswordWithEmbeddedSalt(System.String,System.String)">
            <summary>
            Same as <see cref="M:EasyCrypto.PasswordHasher.ValidatePasswordWithEmbeddedSalt(System.String,System.Byte[])" /> but accepts string for hashWithEmbeddedPassword
            </summary>
            <param name="password">Password to check</param>
            <param name="hashAndEmbeddedSalt">Hash with embedded salt</param>
            <returns>
            Bool, true if password is valid
            </returns>
        </member>
        <member name="M:EasyCrypto.PasswordHasher.GenerateRandomSalt">
            <summary>
            Generates the random salt.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EasyCrypto.ProgressReportIntensity">
            <summary>
            Used to decide how often to report progress
            </summary>
        </member>
        <member name="F:EasyCrypto.ProgressReportIntensity.Optimized">
            <summary>
            Recommended value, report about 100 times or less
            </summary>
        </member>
        <member name="F:EasyCrypto.ProgressReportIntensity.Intensive">
            <summary>
            Reports progress as soon as possible, after each iteration
            </summary>
        </member>
        <member name="T:EasyCrypto.ReportAndCancellationToken">
            <summary>
            Token for reporting progress of action and offering a way to cancel the operation. Warning, you should never reuse instance of this class!
            </summary>
        </member>
        <member name="P:EasyCrypto.ReportAndCancellationToken.CanReportProgress">
            <summary>
            Gets a value indicating whether operation can report progress.
            </summary>
            <value>
            <c>true</c> if operation can report progress; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EasyCrypto.ReportAndCancellationToken.IsCanceled">
            <summary>
            Gets a value indicating whether operation is canceled.
            </summary>
            <value>
            <c>true</c> if operation is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EasyCrypto.ReportAndCancellationToken.Cancel">
            <summary>
            Cancels the operation.
            </summary>
        </member>
        <member name="P:EasyCrypto.ReportAndCancellationToken.ReportProgress">
            <summary>
            If set reports progress with value of type double where value can be between 0.0 and 1.0
            </summary>
        </member>
        <member name="P:EasyCrypto.ReportAndCancellationToken.IntensityOfProgressReporting">
            <summary>
            Gets or sets the intensity of progress reporting.
            </summary>
            <value>
            The intensity of reporting.
            </value>
        </member>
        <member name="T:EasyCrypto.RsaEncryption">
            <summary>
            Class for generating key pairs and encrypting and decrypting
            </summary>
        </member>
        <member name="M:EasyCrypto.RsaEncryption.GenerateKeyPairs">
            <summary>
            Generates RSA key pair with 2048 bits
            </summary>
            <returns>Generated key pairs</returns>
        </member>
        <member name="M:EasyCrypto.RsaEncryption.GenerateKeyPairs(EasyCrypto.RsaKeySizes)">
            <summary>
            Generates RSA key pair of desired size (note that keys larger than 4096 bits will have high impact on performance)
            </summary>
            <param name="keySize">Size of the key</param>
            <returns>Generated key pair</returns>
        </member>
        <member name="M:EasyCrypto.RsaEncryption.Encrypt(System.Byte[],EasyCrypto.RsaPublicKey)">
            <summary>
            Encrypts array of bytes
            Size of data cannot be longer than the key used
            </summary>
            <param name="data">Data to encrypt, cannot be larger than the key used</param>
            <param name="key">Key to use for encryption</param>
            <returns>Encrypted data as byte array</returns>
        </member>
        <member name="M:EasyCrypto.RsaEncryption.Encrypt(System.String,EasyCrypto.RsaPublicKey)">
            <summary>
            Encrypts string
            Size of data cannot be longer than the key used
            </summary>
            <param name="data">Data to encrypt, cannot be larger than the key used</param>
            <param name="key">Key to use for encryption</param>
            <returns>Encrypted data as string</returns>
        </member>
        <member name="M:EasyCrypto.RsaEncryption.Decrypt(System.Byte[],EasyCrypto.RsaPrivateKey)">
            <summary>
            Decrypts array of bytes (if public key is used for encryption than private key needs to be used for decryption and vice versa)
            </summary>
            <param name="data">Data to decrypt</param>
            <param name="key">Key to use for decryption</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:EasyCrypto.RsaEncryption.Decrypt(System.String,EasyCrypto.RsaPrivateKey)">
            <summary>
            Decrypts string (if public key is used for encryption than private key needs to be used for decryption and vice versa)
            </summary>
            <param name="data">Data to decrypt</param>
            <param name="key">Key to use for decryption</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="T:EasyCrypto.RsaKeyPair">
            <summary>
            RSA key pairs
            </summary>
        </member>
        <member name="M:EasyCrypto.RsaKeyPair.#ctor(EasyCrypto.RsaPrivateKey)">
            <summary>
            Constructor accepts private key
            </summary>
            <param name="privateKey">Private key</param>
        </member>
        <member name="M:EasyCrypto.RsaKeyPair.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Constructor, accepts RSAParameters
            </summary>
            <param name="rsaParams">RSA parameters</param>
        </member>
        <member name="P:EasyCrypto.RsaKeyPair.PublicKey">
            <summary>
            Public key
            </summary>
        </member>
        <member name="P:EasyCrypto.RsaKeyPair.PrivateKey">
            <summary>
            Private key
            </summary>
        </member>
        <member name="T:EasyCrypto.RsaKeySizes">
            <summary>
            Allowed sizes of RSA keys
            </summary>
        </member>
        <member name="F:EasyCrypto.RsaKeySizes.Rsa2048">
            <summary>
            2048 bits
            </summary>
        </member>
        <member name="F:EasyCrypto.RsaKeySizes.Rsa4096">
            <summary>
            4096 bits
            </summary>
        </member>
        <member name="F:EasyCrypto.RsaKeySizes.Rsa8192">
            <summary>
            8192 bits
            </summary>
        </member>
        <member name="F:EasyCrypto.RsaKeySizes.Rsa16384">
            <summary>
            16384 bits
            </summary>
        </member>
        <member name="T:EasyCrypto.RsaKeySizesExtensions">
            <summary>
            Extension methods for <see cref="T:EasyCrypto.RsaKeySizes"/>
            </summary>
        </member>
        <member name="M:EasyCrypto.RsaKeySizesExtensions.GetIntegerKeySize(EasyCrypto.RsaKeySizes)">
            <summary>
            Maps <see cref="T:EasyCrypto.RsaKeySizes"/> to integers
            </summary>
            <param name="size">Enum value</param>
            <returns>Integer value</returns>
        </member>
        <member name="T:EasyCrypto.RsaPrivateKey">
            <summary>
            RSA private key
            </summary>
        </member>
        <member name="M:EasyCrypto.RsaPrivateKey.#ctor(System.String)">
            <summary>
            Constructor accepting string key
            </summary>
            <param name="key">Key value</param>
        </member>
        <member name="M:EasyCrypto.RsaPrivateKey.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Constructor accepting <see cref="T:System.Security.Cryptography.RSAParameters"/>
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="P:EasyCrypto.RsaPrivateKey.KeySize">
            <summary>
            Key size in bytes
            </summary>
        </member>
        <member name="P:EasyCrypto.RsaPrivateKey.Key">
            <summary>
            Key in form of string
            </summary>
        </member>
        <member name="M:EasyCrypto.RsaPrivateKey.GetParameters">
            <summary>
            Gets key in form of <see cref="T:System.Security.Cryptography.RSAParameters"/>
            </summary>
            <returns>RSAParameters</returns>
        </member>
        <member name="T:EasyCrypto.RsaPublicKey">
            <summary>
            RSA public key
            </summary>
        </member>
        <member name="M:EasyCrypto.RsaPublicKey.#ctor(System.String)">
            <summary>
            Constructor, accepts encoded key, only stores public part of the key
            </summary>
            <param name="key">Encoded key</param>
        </member>
        <member name="M:EasyCrypto.RsaPublicKey.#ctor(EasyCrypto.RsaPrivateKey)">
            <summary>
            Constructor accepts private key, only stores public part of the key
            </summary>
            <param name="key">Private key</param>
        </member>
        <member name="M:EasyCrypto.RsaPublicKey.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Constructor accepts parameters, only stores public part of the key
            </summary>
            <param name="parameters">RSA parameters</param>
        </member>
        <member name="P:EasyCrypto.RsaPublicKey.KeySize">
            <summary>
            Key size in bytes
            </summary>
        </member>
        <member name="P:EasyCrypto.RsaPublicKey.Key">
            <summary>
            Key in form of string
            </summary>
        </member>
        <member name="M:EasyCrypto.RsaPublicKey.GetParameters">
            <summary>
            Gets key in form of <see cref="T:System.Security.Cryptography.RSAParameters"/>
            </summary>
            <returns>RSAParameters</returns>
        </member>
        <member name="T:EasyCrypto.TokenGenerator">
            <summary>
            Utility for generating string tokens for different purposes (e.g. password reset, email address confirmation, ...)
            </summary>
        </member>
        <member name="F:EasyCrypto.TokenGenerator.DefaultAllowedChars">
            <summary>
            Characters allowed in generated token by default
            </summary>
        </member>
        <member name="M:EasyCrypto.TokenGenerator.#ctor">
            <summary>
            Default constructor, uses English upper case and lower case letters and numeric characters for allowedChar,
            which are used for token generation. <see cref="F:EasyCrypto.TokenGenerator.DefaultAllowedChars"/>
            </summary>
        </member>
        <member name="M:EasyCrypto.TokenGenerator.#ctor(System.String)">
            <summary>
            Constructor that allows defining allowed characters to be used for token generation
            </summary>
            <param name="allowedChars">
            Characters to be used for token generation, cannot be null or empty, must include at least 10
            distinct characters, white space characters (space, tab, new line, ...) are ignored
            </param>
        </member>
        <member name="M:EasyCrypto.TokenGenerator.GenerateToken(System.Int32)">
            <summary>
            Generates random string token of specified length
            </summary>
            <param name="length">Token length must be greater than 0.</param>
            <returns>Generated random token with specified length.</returns>
        </member>
        <member name="M:EasyCrypto.TokenGenerator.HashToken(System.String)">
            <summary>
            Hashes token
            </summary>
            <param name="token">Token to hash</param>
            <returns>Hashed token with embedded salt</returns>
        </member>
        <member name="M:EasyCrypto.TokenGenerator.ValidateTokenHash(System.String,System.String)">
            <summary>
            Validates token hash
            </summary>
            <param name="token">Token to validate</param>
            <param name="hash">Hash to validate token against</param>
            <returns></returns>
        </member>
        <member name="T:EasyCrypto.ValidationResult">
            <summary>
            Results of validating encrypted data
            </summary>
        </member>
        <member name="P:EasyCrypto.ValidationResult.KeyIsValid">
            <summary>
            Gets a value indicating whether [key/password is valid].
            </summary>
            <value>
              <c>true</c> if [key/password is valid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EasyCrypto.ValidationResult.DataIntegrityIsValid">
            <summary>
            Gets a value indicating whether [data integrity is valid].
            </summary>
            <value>
            <c>true</c> if [data integrity is valid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EasyCrypto.ValidationResult.DataFormatIsValid">
            <summary>
            Gets a value indicating whether [data format is valid].
            </summary>
            <value>
              <c>true</c> if [data format is valid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EasyCrypto.ValidationResult.DataFormatVersionIsValid">
            <summary>
            Gets a value indicating whether [data format version is valid].
            </summary>
            <value>
            <c>true</c> if [data format version is valid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EasyCrypto.ValidationResult.DataFormatVersionIsExact">
            <summary>
            Gets a value indicating whether [data format version is exact].
            </summary>
            <value>
            <c>true</c> if [data format version is exact]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EasyCrypto.ValidationResult.IsValid">
            <summary>
            Returns true if everything is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EasyCrypto.ValidationResult.ExceptionToThrow">
            <summary>
            Gets the exception to throw.
            </summary>
            <value>
            The exception to throw.
            </value>
        </member>
        <member name="P:EasyCrypto.ValidationResult.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:EasyCrypto.ValidationResult.ErrorType">
            <summary>
            Gets or sets the type of the error.
            </summary>
            <value>
            The type of the error.
            </value>
        </member>
        <member name="M:EasyCrypto.ValidationResult.SetException(EasyCrypto.Exceptions.DataFormatValidationException.DataValidationErrors)">
            <summary>
            Sets the exception.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:EasyCrypto.Validation.KeyCheckValueValidator">
            <summary>
            Validates for KCV
            </summary>
        </member>
        <member name="F:EasyCrypto.Validation.KeyCheckValueValidator._kcvData">
            <summary>
            The _KCV data
            </summary>
        </member>
        <member name="F:EasyCrypto.Validation.KeyCheckValueValidator._kcvLength">
            <summary>
            The _KCV length
            </summary>
        </member>
        <member name="M:EasyCrypto.Validation.KeyCheckValueValidator.GenerateKeyCheckValue(System.Byte[])">
            <summary>
            Generates the key check value.
            </summary>
            <param name="key">The key.</param>
            <returns>Byte array, the KCV</returns>
        </member>
        <member name="M:EasyCrypto.Validation.KeyCheckValueValidator.GenerateKeyCheckValue(System.Byte[],System.Byte[])">
            <summary>
            Generates the key check value.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns></returns>
        </member>
        <member name="M:EasyCrypto.Validation.KeyCheckValueValidator.ValidateKeyCheckValue(System.Byte[],System.Byte[])">
            <summary>
            Validates the key check value. Throws <see cref="T:EasyCrypto.Exceptions.KeyCheckValueValidationException"/> if validation fails.
            </summary>
            <param name="key">The key.</param>
            <param name="originalKCV">The original KCV.</param>
            <exception cref="T:EasyCrypto.Exceptions.KeyCheckValueValidationException">KCV validation is unsuccessful. Most likely wrong key/password used for decryption.</exception>
        </member>
        <member name="M:EasyCrypto.Validation.KeyCheckValueValidator.ValidateKeyCheckValueInternal(System.Byte[],System.Byte[])">
            <summary>
            For internal usage
            </summary>
            <param name="key">The key.</param>
            <param name="originalKCV">The original KCV.</param>
            <returns></returns>
        </member>
        <member name="T:EasyCrypto.Validation.MessageAuthenticationCodeValidator">
            <summary>
            Validates MAC
            </summary>
        </member>
        <member name="M:EasyCrypto.Validation.MessageAuthenticationCodeValidator.CalculateMessageAuthenticationCode(System.Byte[],System.IO.Stream,System.Int64)">
            <summary>
            Calculates the message authentication code.
            </summary>
            <param name="key">The key.</param>
            <param name="encryptedData">The encrypted data.</param>
            <param name="startIndex">Start index from which to calculate MAC, default 0W.</param>
            <returns></returns>
        </member>
        <member name="M:EasyCrypto.Validation.MessageAuthenticationCodeValidator.ValidateMessageAuthenticationCode(System.Byte[],System.Byte[],System.IO.Stream,System.Int64)">
            <summary>
            Validates the message authentication code.
            </summary>
            <param name="key">The key.</param>
            <param name="originalMac">The original mac.</param>
            <param name="encryptedData">The encrypted data.</param>
            <param name="startIndex">The start index.</param>
            <exception cref="T:EasyCrypto.Exceptions.DataIntegrityValidationException">Validation of Message Authentication Code (MAC) has failed.
            Most likely reason for this exception is that encrypted data was modified.</exception>
        </member>
        <member name="M:EasyCrypto.Validation.MessageAuthenticationCodeValidator.ValidateMessageAuthenticationCodeInternal(System.Byte[],System.Byte[],System.IO.Stream,System.Int64)">
            <summary>
            For internal use
            </summary>
            <param name="key">The key.</param>
            <param name="originalMac">The original mac.</param>
            <param name="encryptedData">The encrypted data.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
    </members>
</doc>
